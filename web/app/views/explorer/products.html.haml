- content_for :title do
  Product Explorer
- js_json = ""

%noscript
  :css
    .chart {}
    .axis line, .axis path {
      shape-rendering: crispEdges;
      stroke: black;
      fill: none;
    }
    .circle {
      fill: steelblue;
    }

%h3
  %div Firmware List: Products

#chart

%div
  %table.table.table-bordered.table-striped.table-hover
    %thead
      %tr
        %th #
        %th Vendor
        %th Name
        %th Updates
        %th Initial
        %th Latest
        %th Lifetime
        %th Stats
        %th Item/FW ID
        %th Actions
    %tbody
      - product_index = (@page_num * @per_page)
      - @products_keys.each do |name|
        - updates = @products[name]
        - product_index += 1
        - last_update = 0
        %tr
          %td= product_index
          %td= updates[0][:vendor]
          %td
            .pull-left
              %a{ "data-toggle" => "collapse", "data-target" => "#product#{product_index}"}
                = name
            .pull-right 
              >
          %td= updates.length
          %td= Time.at(updates[0][:date])
          %td= Time.at(updates[-1][:date])
          %td
            = (updates[0][:date] - updates[-1][:date])/(60*60)
            hours
          %td 
          %td= updates[0][:item_id]
          %td
        %tr
          %td{ :colspan => "10", :style => "padding: 0px; padding-right: 0px !important" }
            .collapse.no-transition{ :id => "product#{product_index}"}
              %table.table.table-bordered.tabl-hover{ :style => "margin-bottom: 0px" }
                %tbody
                  - updates.each do |update|
                    %tr
                      = render "update", :firmware => update, :last_update => last_update
                      - last_update = update[:date]
                      - if update[:load_change].has_key?("change_score")
                        - js_json += "['#{update[:vendor]} #{update[:version]}', #{update[:load_change]['change_score']}, #{last_update}], "

  = will_paginate @products_keys

- content_for :javascript do 
  :javascript
    var data = [#{js_json}]

    var margin = {top: 20, right: 15, bottom: 60, left: 60}
      , width = 960 - margin.left - margin.right
      , height = 500 - margin.top - margin.bottom;
    
    var x = d3.scale.linear()
      .domain([0, d3.max(data, function(d) { return d[1]; })])
      .range([ 0, width ]);
    
    var y = d3.scale.linear()
      .domain([0, d3.max(data, function(d) { return d[2]; })])
      .range([ height, 0 ]);
 
    var chart = d3.select('#chart')
      .append('svg:svg')
      .attr('width', width + margin.right + margin.left)
      .attr('height', height + margin.top + margin.bottom)
      .attr('class', 'chart')

    var main = chart.append('g')
      .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')
      .attr('width', width)
      .attr('height', height)
      .attr('class', 'main')   
        
    // draw the x axis
    var xAxis = d3.svg.axis()
      .scale(x)
      .orient('bottom');

    main.append('g')
      .attr('transform', 'translate(0,' + height + ')')
      .attr('class', 'main axis date')
      .call(xAxis);

    // draw the y axis
    var yAxis = d3.svg.axis()
      .scale(y)
      .orient('left');

    main.append('g')
      .attr('transform', 'translate(0,0)')
      .attr('class', 'main axis date')
      .call(yAxis);

    var g = main.append("svg:g"); 
    
    g.selectAll("scatter-dots")
      .data(data)
      .enter().append("svg:circle")
          .attr("cx", function (d,i) { return x(d[1]); } )
          .attr("cy", function (d) { return y(d[2]); } )
          .attr("r", 8);