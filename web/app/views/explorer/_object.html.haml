-# base = (just print the base object, no children)
-# independent = (this is not linked to an explorer view)
-# source = (this is a source object with unlinkable children)
- action_classes = {"true" => "text-warning", "false" => "text-muted", "locked" => "text-danger", "vulnerable" => "text-danger"}
%tr
  %td 
    %div
      - if obj.has_key?("measured") and obj["measured"] == true
        %i.fa.fa-unlock-alt.text-success
      - else
        %i.fa.fa-unlock-alt.text-warning
      - unless obj.has_key?("guid")
        [obj] 
      - if source
        %a{ :href => "/explorer/firmware/#{obj["object_id"]}/" }
          - unless obj.has_key?("guid")
            .guid= obj["object_id"]
          - else
            .guid= obj["guid"]
      - elsif independent
        .guid
          %a{ :href => "/explorer/firmware/#{obj["object_id"]}/"}
            = obj["object_id"]
        %div
          %small
            FirmwareID:
            %a{ :href => "/explorer/firmware/#{obj["firmware_id"]}/"}
              = obj["firmware_id"]
      - else
        .guid= obj["object_id"]
      - if obj.has_key?("guid_name")
        %div
          %small= obj["guid_name"]
  %td
    - if source == false and obj.has_key?("load_meta")
      #{obj["load_meta"]["magic"]}
    - else
      %small
        #{obj["vendor"]}
        - if source == true or independent == true
          (#{obj["type"]})
  %td
    - if obj.has_key?("attrs")
      - if obj["attrs"].has_key?("name")
        .none= obj["attrs"]["name"]
      - if obj["attrs"].has_key?("description")
        .none= obj["attrs"]["description"]
    - if obj.has_key?("info")
      - obj["info"].each do |key, value|
        %b= key
        %small= value
    - if obj.has_key?("load_meta")
      - if source == true or independent == true
        %div
          %small (#{obj["load_meta"]["magic"]})
    -# obj["objects"].each do |sub_obj|
  %td #{obj["size"]} 
  %td 
    - if obj.has_key? ("stats")
      - obj["stats"].each do |key, value|
        -# unless key == "Magic"
        %b= key
        %small= value
        - if key == "Changed"
          %br
  %td 
    - if obj.has_key?("actions") and obj["actions"].has_key?("vulnerable")
      - c = action_classes.has_key?(obj["actions"]["vulnerable"]) ? action_classes[obj["actions"]["vulnerable"]] : "text-danger"
      %i.fa.fa-bug.toggle.toggle-vulnerable{ "data-id" => obj["id"],
        "class" => c,
        "data-type" => "vulnerable",
        "data-firmware" => obj["firmware_id"],
        "data-value" => obj["actions"]["vulnerable"] }
    - else
      %i.fa.fa-bug.toggle.toggle-vulnerable{ "data-id" => obj["id"],
        "class" => "text-muted",
        "data-type" => "vulnerable",
        "data-firmware" => obj["firmware_id"],
        "data-value" => "false" }
    -#= obj
    - if obj.has_key?("guid_actions") and obj["guid_actions"].class != String and obj["guid_actions"].has_key?("trusted")
      %i.fa.fa-key.toggle.toggle-trusted{ "data-id" => obj["id"],
        "class" => action_classes[obj["guid_actions"]["trusted"]],
        "data-type" => "trusted",
        "data-firmware" => obj["firmware_id"],
        "data-value" => obj["guid_actions"]["trusted"] }
    - else
      %i.fa.fa-key.toggle.toggle-trusted{ "data-id" => obj["id"],
        "class" => "text-muted",
        "data-type" => "trusted",
        "data-firmware" => obj["firmware_id"],
        "data-value" => "false" }

    - if obj.has_key?("guid_actions") and obj["guid_actions"].class != String and obj["guid_actions"].has_key?("network")
      %i.fa.fa-fighter-jet.toggle.toggle-network{ "data-id" => obj["id"],
        "class" => action_classes[obj["guid_actions"]["network"]],
        "data-type" => "network",
        "data-firmware" => obj["firmware_id"],
        "data-value" => obj["guid_actions"]["network"] }
    - else
      %i.fa.fa-fighter-jet.toggle.toggle-network{ "data-id" => obj["id"],
        "class" => "text-muted",
        "data-type" => "network",
        "data-firmware" => obj["firmware_id"],
        "data-value" => "false" }

- if obj.has_key?("objects") and base == false

  - obj["objects"].each do |child|
    = render("object", :obj => child, :source => false, :independent => independent, :base => false)
        
      